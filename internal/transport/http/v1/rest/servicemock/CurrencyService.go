// Code generated by mockery v2.20.0. DO NOT EDIT.

package servicemock

import (
	context "context"

	entity "github.com/Kin-dza-dzaa/task/internal/entity"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CurrencyService is an autogenerated mock type for the CurrencyService type
type CurrencyService struct {
	mock.Mock
}

// CreateRates provides a mock function with given fields: ctx, date
func (_m *CurrencyService) CreateRates(ctx context.Context, date time.Time) {
	_m.Called(ctx, date)
}

// Rates provides a mock function with given fields: ctx, date, code
func (_m *CurrencyService) Rates(ctx context.Context, date time.Time, code string) ([]entity.Rate, error) {
	ret := _m.Called(ctx, date, code)

	var r0 []entity.Rate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, string) ([]entity.Rate, error)); ok {
		return rf(ctx, date, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, string) []entity.Rate); ok {
		r0 = rf(ctx, date, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Rate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, string) error); ok {
		r1 = rf(ctx, date, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCurrencyService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCurrencyService creates a new instance of CurrencyService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCurrencyService(t mockConstructorTestingTNewCurrencyService) *CurrencyService {
	mock := &CurrencyService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
